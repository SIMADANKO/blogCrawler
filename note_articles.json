{
  "2025-05-09-ゴールから逆引きする発想": {
    "title": "ゴールから逆引きする発想",
    "text": "2025-05-09T06:47:49+09:00\n\nシステム開発のスケジュールを作る時は、ゴールから逆引きすること多いと思います。2025年10月1日に本番リリースすることが決まっていて、そこを起点にテスト、製造、設計、要件定義のスケジュールが決まっていく。本番リリース日が、お仕事における締切日。期限を守るために、ゴールから逆引きする発想になると思います。\nこのゴールから逆引きする発想、システム開発以外でも有効です。小売店で、1日に100万円の売上を上げるという目標を立てました。100万円の売上がゴールです。100万円を達成するためには、商品Aを30個売って、商品Bを20個、商品Cを40個売る必要があるなってことがわかります。その上で、その商品を売る作戦を考えるのです。\nゴールに設定できるものは、本番リリース日、売上目標、期限など様々。でも、カイゼン系タスクや、Tryand Error で進めるようなものって、ゴールが設定し辛いです。1年後に、こうなっていたいという理想の姿はあったとしても、その通りになるかどうか？がわからない。状況に応じて予定がコロコロ変わる。でも、計画を立てなくても良いという訳ではありません。\nそんな時は、報告内容をゴールにするのがよいでしょう。お仕事なので、進捗を報告します。また、上手く行くかどうか？わからないことは、都度チェックポイントを設けながら、判断しながら進めることが大事です。それに向け、1か月後には、こんな報告ができると良いなぁ、3ヶ月後にはこういう報告ができるといいなあという理想の報告を考えます。3ヶ月後に判断のチェックポイントがあれば、チェックポイントの通過条件を改めて整理し、通過するための報告内容を考える。そして、通過に向けた計画を立てるのです。\n本番リリース日、期限は最終ゴールです。最終ゴールまでの道のりは長いです。そこで途中報告の場を、直近のゴール、都度ゴールと定め進めると、短期間の間で達成感を得ることもできるのではないかと思います。",
    "url": "https://note.com/saratoga623/n/n237f37efa452"
  },
  "2025-05-08-脱！上司と部下の板挟み": {
    "title": "脱！上司と部下の板挟み",
    "text": "2025-05-08T05:32:17+09:00\n\n上司と部下の板挟みになっている中間管理職のみなさんに朗報です（笑）\nChat-GPTによると、中間管理職の悩みNo.1は、上司と部下の板挟みになることだそうです。具体的には、上司からの無理な要求をどう現場に落とし込むか。部下の不満やモチベーション低下への対応などが挙げられるとのこと。中間管理職って大変ですね（笑）。でも、これからお話することを心がけることで、管理職のやりがいは向上するはずです。管理職がイキイキワクワクしている組織が良いですもんね。\nまず、なぜ上司が無理な要求をしてくるのか？という話をします。\nメンバーは、既に発生してしまっている顕在的課題に注文しがち。残業が多くなってしまっているだとか、プロジェクトが遅延しているだとか。今、まさに発生している、苦労していることですから、この問題に目がいくのは当然。でも、潜在型問題・創造型問題に到達している可能性があります。例えば、社長は会社を持続可能にするという目線を持っています。持続可能にするには、目線は今ではいけないのです。未来に向けなければいけません。\nだから、残業で忙しい時に、あれもやって、これもやってという新しいこと（今困っていないこと）をぶち込んでくるのです。会社・組織を持続可能とするためには、必要なことなんです。\nまた、板挟みになるということは、上司のベクトルとメンバーのベクトルが一致していない可能性があります。忙しいのに、何でこの仕事をやらなくちゃいけないんだ・・・という不満。まさに、ベクトルが合っていないですね。ポイントは、今目線か、未来目線なのか。管理職としては未来の目線でベクトルを合わせる努力が必要となります。ベクトルはわかっているが、忙しいが勝ってしまう。これわかります。忙しいお仕事の優先度を下げる、また他のメンバー、パートナーさんに任せることが出来ないのか？知恵と工夫を凝らして、考え抜くことがセットです。\nただ、ベクトルを合わせるのは言うは易し。メンバーは腹落ちしない可能性があります。そんな時はまずやってもらうこと。やってみないと気づきません。やってみるから腹落ちする。この順番なのです。\n今日お話ししたことは、いわゆる理論です。この理論通りに進めても上手く行かないかも知れませんが、実行あるのみ。上手く行かないところの真因分析をし、補正していくこと。このサイクルで悩みが解消するといいですね。",
    "url": "https://note.com/saratoga623/n/n6b3e52d368d9"
  },
  "2025-04-30-深く考えることは脳にとって重労働。でも大事なこと。": {
    "title": "深く考えることは脳にとって重労働。でも大事なこと。",
    "text": "2025-04-30T18:31:06+09:00\n\n長い目で考えましょう！これ、理解できます。でも、結論を出し急いで目先の方に流れがち。今日はそんなお話をします。\n人間の思考回路には、ファストとスローの2つがあるそうです。ファストは日常ちょくちょく発生する問題に対処するための、自動的、無意識的、本能的に反応する素早い思考です。スローはその逆で、しっかり思考すること。ただ、スローは脳にとって地味な重労働なんです。だからファストに逃げてしまいがち。これが結論を出し急ぐ構造です。\n例えは、テレビのリモコン。電源をONにしょうとしましたが、反応がありません。そんな時、電源ボタンを連打したり、電池をくるくる回したり、電池を入れ直したりしませんか？この対処療法がファストで、私もやってしまいます・・・。電池を交換するのがめんどくさくなり、ついつい・・・。\nシステム開発\nでもファストが見え隠れすることがあります。テストでバグが出た時、本番でインシデントが発生した時など、真因分析をします。担当者のスキル不足、という分析。これがまさにファストであり、結論の出し急ぎなんです。スローの発想に立つのであれば、何故、スキルの不足している担当が、正しい設計を出来なかったのか？を考えることになります。\nまた、すぐ諦めてしまう問題も、ファスト思考かも知れません。この処理は、こういう仕組みになっているから現新比較はできません。こんな感じで、現新比較による本番確認を諦めてしまいがちですが、粘り強く考え続けるのです。知恵を絞れば、突破できる事だって多いのです。また、\nシステム開発\nの前半でスロー思考になっておくことも重要です。現新比較しやすい設計にしておくことも可能です。\n反射的に結論を出さず、じっくり考えることが重要です。",
    "url": "https://note.com/saratoga623/n/n6e87a598b854"
  },
  "2025-04-28-使える情報と使えない情報": {
    "title": "使える情報と使えない情報",
    "text": "2025-04-28T19:19:39+09:00\n\n今現在、みなさんが1日に得ることが出来る情報量は、\n平安時代\nの一生分、江戸時代の数年～数十年分の情報量だと言われています。今はインターネットあり、生成AIありで、情報に埋もれている時代。すべてインプットしてしまうと、オーバーフローしてしまいます。\nまた、立場が上がれば、全てを自分で確認することが難しくなります。全部、自分の目で確認しよう！これは素晴らしい心がけですが、これもオーバーフローしてしまいます。人から情報を得て、決断・判断する必要があるのです。\n情報量が多い中、スムーズにインプットし、適切な決断・判断をするにはどうしたら良いでしょうか？使えない情報を使える情報に変えることが重要です。\n私たちは人間ですから感情を持ち合わせています。でも、感情が真実を隠してしまい、使えない情報になってしまうこともあるのです。メンバーが上司にこんな報告をしました。「〇〇さん、全然やる気がなくて、みんな困っています。何とかしてください。」やる気がないという表現には、苛立ちが見え隠れしていますよね。感情が表に出ている状態だと思います。この感情の裏にある事実を確認することが大事です。どういう行動からやる気がないと思ったのか？実際に行動した事実を確認しましょう。\n確認したところ、〇〇さんは大切な商談中に居眠りしていることがわかりました。事実がわかって、初めて注意するなどの対処が出来るようになります。ただ、居眠りの背景は確認する必要があると思います。トラブル続きで、ろくな睡眠が出来ていない状況でしたら、大事な商談であってもリスケする配慮も必要だったのかも知れません。\nいかようにも解釈できるワードも使えない情報です。「しっかり管理してください！」と注意しているケース。なぜ、管理できていないと思ったのか？そこまで掘り下げる必要があります。\n最初の話に戻ります。「みなさんが1日に得ることが出来る情報量は、\n平安時代\nの一生分、江戸時代の数年～数十年分の情報量だと言われています。」のくだり。これ、信じましたか？実は、この数字は正確な科学的根拠に基づくものではなく、現代と過去の情報量の極端な違いをイメージしやすく伝えるための比喩表現です。大きく間違ってはいませんが、数字も時と場合によっては使えない情報となり得ます。注意が必要です。",
    "url": "https://note.com/saratoga623/n/n9d9e8f1cf1f3"
  },
  "2024-11-26-基本設計の品質がプロジェクト成功の鍵": {
    "title": "基本設計の品質がプロジェクト成功の鍵",
    "text": "2024-11-26T06:30:57+09:00\n\n基本設計は大切だ、という話です。また、高いスキルを必要とする工程です。基本設計をきちんと出来れば、エンジニアとして一人前と言っても過言ではありません。重要かつ難易度の高い基本設計の品質が、プロジェクト成功の鍵を握っています。\n基本設計の目的は何でしょう？私は2つあると考えています。\n① 詳細設計のインプット\n基本設計は詳細設計の前工程ですから、当たり前の話ですね。しかし、この当たり前が意識出来ていないことが意外と多いのです。詳細設計で遅延など問題が発生することがあります。原因は何でしょう？よく、詳細設計担当者のスキル不足で片付けられることがあります。果たして本当でしょうか？そのようなケースでは私の経験上、基本設計の品質が悪いことの方が多いです。例えば、基本設計にAとBを区別すると書いてあるのですが、区別の方法が書いていなかったりするのです。方法が書かれていなければ詳細設計は出来ません。詳細設計は、基本設計ほどの高スキル者でなくとも実施可能であるべきだと思います。その前提で、十分なインプット情報を充実させる必要があります。\n② ユーザーと仕様を握る\nユーザーは要件を出します。その要件が、システムに確実に実装されていることをユーザーに確認してもらい、承認を得る必要があります。つまり、システムに詳しくないユーザーが理解できる表現になっていることが肝心です。そして、要件定義書と整合性が取れていること。基本設計をやる中で、要件を100%実現するのが難しいと気づき、ユーザーと要件変更の調整をし合意したとします。そんな時は、要件定義書も修正してもらう必要があります。\n基本設計の品質が悪く①の目的が達成出来ていないケースですと、次工程の詳細設計で苦戦することになりますが、早い段階での問題判明であり、まだマシですね。辛いのは②の目的が達成出来ていないケースです。ユーザーとの認識相違は、テスト工程にならないと判明しません。ユーザーがテスト結果を見て、何か違うぞ、と気づくのです。\nテスト工程は\nシステム開発\nの後半戦。サービスインまで、わずかな時間しか残っていません。このタイミングでの認識相違。ユーザーは修正してほしいと言い、開発側は修正していたら間に合いませんと言います。以前お話した変更管理のスキームで上手く収まれば良いのですが、サービスイン直前での問題判明。感情論で、言った言わないで揉めることも想定されます。\n基本設計は本当に大切な工程です。十分な期間を確保し、きっちり対応すること。開発側だけで完結させず、ユーザーに確認してもらう期間も確保することが肝心です。",
    "url": "https://note.com/saratoga623/n/n77418a8efe3c"
  },
  "2024-11-22-失敗のパターンを持っておく": {
    "title": "失敗のパターンを持っておく",
    "text": "2024-11-22T06:34:27+09:00\n\n突然ですが、成功の秘訣は何ですか？と聞かれて、パッと答えることが出来るでしょうか。また成功の秘訣を語るスポーツ選手などの話を聞いて、同じことをやっても成功する気がしません。このように成功の秘訣はパターン化するのが難しいのです。\n逆に、失敗の秘訣はパターン化しやすいです。料理で例えてみます。焼き過ぎると焦げてしまいます。塩を入れ過ぎると辛くなってしまいます。このように、これをやれば失敗することはわかりやすく定義できるのです。\nシステム開発\nに限らず、どんなお仕事でも一緒で、失敗の秘訣はたくさんあります。私、2001年から社会人をやっており、多くの失敗をしました。数えきれないほどの失敗の秘訣を持っておりますが、いくつかあげてみたいと思います。\n① メンバーに依頼する際に全くコミュニケーションを取らす、思っていたものとは全く違う成果物が出来上がってしまった。\n② インプット資料を読み込まず思い込みで進め、手戻りが発生。\n③ 目的の把握をおざなりにしたため、多くの指摘を受けた。\n④ 手順を無視して、障害を発生させてしまった。\n⑤ 口頭の指示・やりとりだけで、文章に残すことを怠ったため、後で言った言わない問題が発生。\nなどなど。過去の失敗事例を思い出しながら、失敗の秘訣をパターン化し、自分の中に持っておく。自分ではやらない。メンバーがやろうとしていたら、指摘する。やらなければ成功するとは限らないのですが、成功の確率は確実に上がると思います。失敗は成功のもと、という言葉もあります。失敗都度、失敗の秘訣をパターン化し、自分のレパートリーに追加することをお勧めします。\nしかし、自分一人が経験できることは限られています。個人に閉じた経験だけで勝負するのは、非効率です。個人の経験を組織に共有し、また組織も個人の経験を吸い上げる。組織の経験として蓄えることで、組織・プロジェクトの成功確率を上げていくことが重要です。\n特に失敗の経験となると、ネガティブな要素を感じることもあるでしょう。失敗を包み隠さず組織に展開した結果、非難され、自分の評価が下がってしまうのではないか？と考えてしまうかも知れません。特に組織の長やプロジェクトのPMが失敗はあってはならないという発想だと、失敗の共有がされることはないでしょう。失敗を共有したことを評価することが、ネガティブ情報をオープンにし、組織・プロジェクトの発展に寄与するのです。",
    "url": "https://note.com/saratoga623/n/n30cd05ad1be0"
  },
  "2024-11-21-本番確認のレベル感を決める観点": {
    "title": "本番確認のレベル感を決める観点",
    "text": "2024-11-21T06:47:06+09:00\n\n前回に続き本番確認の話です。本番確認もテストと同じで、これをやれば大丈夫だ！といった決まった正解はありません。また、テストと違うのは、短期間勝負ということです。問題が発生しているのにのんびり対応していたら、被害が拡大してしまいます。スピード感を持った対応が必要となります。\nテストで1,000ケースの確認をしたとします。じゃあ、本番確認では何ケースの確認をすればよいでしょうか？1,000ケースの確認が出来れば完璧ですよね。しかし、テストでは2ヶ月かけて1,000ケースを対応したのです。スピード重視の本番確認で、テストと同じボリュームの確認をするのは無理なんです。顧客影響を回避するためには、1時間で確認する必要があります。1時間で1,000ケースなんて100メートルを1秒で走れと言っているようなもの。出来ないことはやってはいけません。\nつまり、確認ケースを絞り込む必要があります。では、どういう観点でケース選定すれば良いのでしょうか？何点か紹介します。\n① リリース事故を見つける観点\nテストをしたプログラムが、正しく本番環境に上がっていれば、理屈的にはテストと同じ結果になります。もし、テストしたプログラムと別のバージョンのプログラムが上がってしまっていたらゾッとします。間違いなく、狙ったプログラムがすべて本番確認に上がったことの確認が必要です。\n② 大部分を救う観点\n何か問題が発生した時、全体の98%に影響が出てしまったら大変。でも、2%の影響ならまだマシです。本番確認はスピード勝負。まずは98%の影響有無を見るべく、基本ケース・王道ケースを確認します。2%の確認に注力してしまい、98%に影響が出ていることを見逃してはいけません。\n③ テスト出来なかった観点\n何かしらの理由で、テスト出来ていないことがあると思います。テストでは発生させられないタイミングがあるなど、テスト環境の制約によるものや、リスクをとってあえて実施しなかったケースもあるでしょう。理由はどうであれ、テストしてませんから本番で問題が発生する可能性は高まります。テスト出来なかった分、本番でしっかり確認します。\n④ 影響調査漏れを見つける観点\n改定開発の場合、影響調査をして改定箇所を特定します。改定した機能をテストし、本番リリースします。もし、影響調査漏れがあったらどうなりますか？テスト出来ていませんから、本番で何かしらの問題が発生していまいます。影響調査漏れの箇所を狙って確認するのは不可能です。しかし、改定した機能の周辺の重要成果物を確認することで、影響調査漏れに気づくことが出来るかもしれません。\n本番確認は、問題発生を防ぐ水際対策の位置付けでもあります。効率的に、確実に被害を防ぐ為に、知恵を絞る必要があるのです。",
    "url": "https://note.com/saratoga623/n/n85105a6207c8"
  },
  "2024-11-20-本番実施計画も性悪説が基本です": {
    "title": "本番実施計画も性悪説が基本です",
    "text": "2024-11-20T06:31:47+09:00\n\nシステムを設計・製造し、テストも完了させました。ついに、本番リリース、サービスインです。想定通りうまく行って欲しいですよね。しかし、本番実施こそ\n性悪説\nで考えることが重要です。\nまずは、失敗した時の影響を考えてみましょう。金融のシステムだったとします。エンドユーザーにお金を請求する局面で、誤って10倍の請求をしてしまった。これ、許されないですよね。また、1,000万人に対して誤請求をしてしまったとすると、この世の終わりです。\nSNS\nが炎上し、ユーザー企業の信頼も低下。このような事態は絶対に発生させてはいけません。\n本番実施計画でまず考えることは、この世の終わり状態を回避する作戦です。サービスインする前に、関係者に限定して試してみる関係者本番が出来ると安全です。しかし、いろいろな制約があり、出来ないこともあります。さてどうすれば、この世の終わりを回避出来るでしょうか？\nユーザーへの誤請求という想定外事象。想定外が起こっていることは、比較的早く見つけることができるのではないでしょうか？時間がかかるのは、想定外を作り出している原因を見つけること。障害が発生すると、エンジニア魂に火がついて原因分析に没頭してしまいがちです。没頭している間、時間の経過とともに被害が拡大してしまうのです。\n障害発生時に真っ先に考えるべきは、被害を出さないこと、被害を止めること、被害の拡大を抑制することです。原因調査は二の次です。\n被害を広げないための一番確実な方法は、サービスを止めることです。WEBのサービスですと、WEBの画面を閉塞する。また、プログラムを改定前に戻すなど、システムの特性に応じてやり方は様々だと思いますが、サービスを止めるという一番確実で安全な方法を選択します。誤請求が拡大している中、前に進めながら原因を潰そうとするような対策前進は自殺行為です。\nしかしながら、処理が進んでしまい、プログラムを戻す方が危険なケースもあると思います。その場合は対策前進を選択せざるを得ません。しかし、考える順番は、まずは止める・戻すが先です。どうしても止める・戻すが出来ない場合だけ、対策前進を選択するだと思います。\n金融システムで誤請求のような、深刻なケースを例にお話ししました。当然、軽微な影響で収まるケースもあるかと思います。その時でも戻すのか？という議論はあると思います。多少の問題は飲み込んで、前に進める決断もあり得ます。\nしかし、問題が起こってから議論していては遅いのです。誤請求が拡大している横で議論しているのは、被害の拡大しているのを指をくわえて見ているのと同じです。本番実施計画の段階で事前に決めて、ユーザーとも合意することが必要です。",
    "url": "https://note.com/saratoga623/n/nbeddb9d00cad"
  },
  "2024-11-19-保守工程のことを意識する": {
    "title": "保守工程のことを意識する",
    "text": "2024-11-19T05:08:12+09:00\n\nとある飲食店の話です。閉店した時に、入り口に「本日の営業は終了しました」の札をかけることがあると思います。21時閉店だったとします。閉店直後であれば問題はありません。24時を跨ぎ次の日になりました。でも、本日はの営業は終了しましたなのです。つまり、このお店は二度と営業を開始しないことになってしまうのです。\n常識的に考えればそんなことあり得ない！というご意見もあろうかと思います。しかし、書いてある日本語から読み取れるのは、この店は二度と営業しないということなのです。\nこれを回避するには、24時になった瞬間に別の札に変えることです。例えば、本日の営業は10時からです、とか。でも夜中にそんなことやってられません。\nこのように、今は大丈夫だけど、後になって困ることってあると思います。後になって困ることを仕込むのは、未来の人たちの負担を作り出していることになります。何の罪もない未来のメンバーに、負担をかけてはいけません。\n閉店の札の例ですと、目的はお店が閉まっている事実を伝えることなんです。本日の営業は終了しましたではなく「CLOSE」で良かったのです。\nプロジェクトでも似たような配慮が必要です。システムは作りっぱなしではなく、完成後も保守し続けることが多いです。保守工程に負担やリスクを残さない。これが鉄則です。\nしっかり標準化して、確実に影響調査ができるようにしておく。DB更新ファイルを作る処理とDB更新処理を分けておき、検証してからDB更新出来るようにしておく。ドキュメントを整備して新規参加者の即戦力化をしやすくしておく。こうすることで、未来の負担やリスクを軽減するのです。\n負担やリスクを未来に持ち込まない精神・方針でプロジェクトを進めることが重要です。しかし、プロジェクトが傾いてくると、何とかプロジェクトを納期順守で終わらせようとする力が働くようになります。業務要件の実現が最優先となり、未来への投資が置き去りになりがちです。果たして、これで良いのでしょうか？\nプロジェクトの期間は開発規模にもよりますが、長くても数年だと思います。それより、プロジェクト終了後に構築・改定したシステム・機能を使い続ける期間の方が長いのです。数十年使い続ける可能性があるのです。\n未来への投資を怠ったため、障害が多発。結果、メンバーの負担が大きく、要員の入れ替えが頻発。常に新規参画者ばかりの保守体制となり、システムの安定稼働には程遠い状況が数十年続いてしまうのです。\nプロジェクトを終わらせることも重要ですが、未来への投資も重要です。どうしても、プロジェクトを期限通りに終わらせなければいけない事情があったとしても、未来への投資を端折ってはいけません。プロジェクト終了後に必ず実施するなど、ユーザーを説得し必ず実行するのです。それが、ユーザーにとっても幸せなことなのです。",
    "url": "https://note.com/saratoga623/n/n17ffb7524fc1"
  },
  "2024-11-18-問題を問題と言える風土": {
    "title": "問題を問題と言える風土",
    "text": "2024-11-18T06:41:22+09:00\n\nニュースでとある問題を報道しています。どう見ても、問題があることは事実のようです。しかし当事者の会見では、そのような問題は確認出来ませんでした、と言ってます。辻褄が合いません。\n何故、このようなことになるのでしょうか？問題はあってはならないという意識があるからだと思います。この発想だと、問題が存在する状態が悪となってしまいます。悪ですから、問題を起こしたら弾劾されてしまいます。その結果、隠蔽することになり、組織・個人の成長はありません。\n問題が起こらない環境なんて、ほぼありません。問題が起こらないことを信じたい気持ちはわかりますが、以下のように考えるのが正しいと思います。\n問題は起こりうる。でも、しっかり対策を打って解決しよう。\nこの前提でいると、問題発生時も落ち着いて構えられます。原因を分析し、非があれば反省し、同じ問題が発生しないよう再発防止に向かいます。結果、組織・個人が成長するのです。\n問題はあってはならないと考えてしまう組織もあれば、問題は起こりうるものだ、と考える組織もあるでしょう。この違いはどこから来るのでしょうか？私は組織の長の姿勢・考え方が大きく影響を与えると思っています。上司が常に問題発生を弾劾する姿勢だと、その空気が全体に蔓延し、隠蔽体質な組織・プロジェクトが完成します。組織の長の思考・行動は、組織全体を表しているのです。\nこのように、組織・プロジェクトが成長に向かっているかどうか？は問題を受け入れることができるか否かによります。問題は毎日発生しているかも知れない、くらいに思うことが、組織やプロジェクトの健全な運営につながります。",
    "url": "https://note.com/saratoga623/n/n4d40e0261819"
  },
  "2024-11-17-議論する組織を目指す": {
    "title": "議論する組織を目指す",
    "text": "2024-11-17T07:09:56+09:00\n\n管理職としては、PMとしては、メンバーの自主性を期待するものです。でも、そんな自主性を阻害する要因があります。それは、\n有識者\nの発言です。\n有識者\nは長年同じシステムの保守・開発をしていることが多いです。そのシステムの知識が豊富で、障害発生時もパパっと対処方法を出すことが出来ます。プログラムをロジックベースで記憶していることもあり、設計方針もすぐに思いつきます。\n特に、数十年動いている\nレガシーシステム\nには、このような\n有識者\nがいるのではないでしょうか？そんな環境に新規参画者が入ってきました。\n有識者\nから、このように対応してと言われました。きっと\n有識者\nの言う通りに対応すると思います。新規参画者には自分の意見・考えはありません。これが、自主性を阻害するメ\nカニ\nズムです。\n有識者\nの経験と知恵は本当に貴重です。でもメンバーの自主性が薄れるのは困ります。どうすれば良いでしょうか？ひとつの答えは議論すること、議論の場を強制的に作ることです。\n有識者\nの発言は過去の成功体験がもとになっていることがあります。過去と同じやり方、似たやり方の提案になっている可能性があります。それが今でもベストなやり方であれば問題ないのですが、外部環境の変化もあり、また当時とは重要視するポイントが変わっているかも知れません。フラットな目線で、その案を評価する必要があります。\n議論の中であえて反対意見を述べてみる。メリット、デメリットを比較してみる。すると、思いついていなかった第3のベストの案が出てくるかも知れません。これは、\n有識者\nがひとりで考えた案ではなく、チームのみんなで考えた案なのです。自分たちで考えた方針です。やらされ感はなく、自主性を発揮できるのではないでしょうか。\nPMが議論しましょう！と掛け声をかけただけでは、なかなか議論は始まりません。議論が始まる仕掛けも必要です。案件着手前や、工程の変わり目て必ず議論をするルールを作る、議論のタスクを\nWBS\nに計上することをお勧めします。\n方向性、方針、作戦を議論することで、より良いやり方を見つけるのに加えて、チームのベクトルも合わせることができ、何よりメンバーの自主性向上につながります。まさに一石三鳥。議論するしかありません。",
    "url": "https://note.com/saratoga623/n/nb2eb74cdf1f9"
  },
  "2024-11-16-個人を主語にするステークホルダーマネジメント": {
    "title": "個人を主語にするステークホルダーマネジメント",
    "text": "2024-11-16T06:53:13+09:00\n\nユーザー会社のA社から依頼を受けて\nシステム開発\nをしているとします。昔、A社さんがこう言ってました、と上司に報告したところ、A社さんという人なんていないだろ、と注意されたことがあります。\nA社さんが言ってましたという発言は、組織認識出来ていない証拠。権限者を動かす為、誰をどう動かすべきか、考えられていないということなのです。少し解説します。\nお仕事をする中で、A社さんが言ってました、B社さんが言ってましたのように、会社名を主語にした発言、よく聞きます。これは、A社の誰の発言なのでしょうか？それが重要です。A社の担当の発言だったとします。それがA社の総意であれば問題ありません。しかし、その担当の思いつきレベルの話であり、A社内で承認されていないようなことだったらどうでしょう？A社に言われた通り進めたけれども、あとでA社からストップがかかる可能性だってあるのです。すごく非効率ですよね。\nこのようにA社の総意かどうか？見極めることが重要です。じゃあどう見極めるか？社長が判断したことであれば、A社の総意と言っても良いでしょう。会社を背負う社長の権限と責任をもって判断したことですから、正しいと思います。しかし、細かいことからすべての事項を社長に判断してもらう訳にはいきません。社長がパンクしてしまいます。\nそこで、この事項は誰に決裁権限があるのか？を確認することが肝心です。例えば部長は1億の発注をする権限があるなど、会社によって権限は異なりますが、それを認識すること。決裁権限者がどういう考えでもって、どう判断しているか？を抑えることが必要となります。\nA社の決裁権限者が言っていることなのかどうかを担当に確認する。まだ決裁権限者の判断を仰いでいなければ、それをお願いする。ユーザー会社側の\nエス\nカレーションを促すことで、判断のスピードも向上します。\n上記のケースでは、主語を会社・集団とせず、決裁権限者を主語にする。決裁権限者を主語にして話が出来るよう、決裁権限者ね考えを知る努力が必要です。",
    "url": "https://note.com/saratoga623/n/n91fa1d956a8c"
  },
  "2024-11-15-雛形の必要性と弊害": {
    "title": "雛形の必要性と弊害",
    "text": "2024-11-15T06:59:53+09:00\n\nシステム開発\nは、ひとりで行うことはほぼ無くて、チームで行うことが多いです。また、そのチームは複数の会社で構成されているケースも多く、異なる教育方針で育ってきた人たちが集まっています。\nまた、システムの特性によっても文化の違いはあるでしょう。金融系システムと流通系システムでは優先すべき事項が異なるため、開発文化も違うかも知れません。\nそんな様々な経験・文化を持ったメンバーの集まりで、プロジェクトを進めるのに大切なのは、誰が対応しても一定の品質が担保される状態を目指すことです。Aさんが対応すれば完璧だけど、Bさんが対応すると漏れがある、という状況・環境にしてはいけないのです。\nそれに向けては、雛形・フォーマットを用意するのがひとつの対策になります。例えば、本番実施計画の時に考える\nコンティンジェンシープラン\n。緊急事態が発生した際に、顧客影響や業務影響を最小限にとどめるために実施する施策や行動指針のことです。施策以外にも、\nコンティンジェンシープラン\nの発動基準や、発動の判断者を定義する必要があります。これらを漏らさず検討し、確実に文章に残せるよう、雛形・フォーマットに発動基準、判断者を記載する枠を用意します。枠があれば、書かざるを得なくなります。書かなければレビューで承認されません。\nこのように、決めておかなければいけないことは、雛形・フォーマット化して、誰が対応しても漏れないようにするのです。\nしかし、雛形・フォーマットには弊害もあります。枠があることで、そこに情報をうめることが目的となってしまうのです。発動基準や判断者を決めなくてはいけない、そもそもの目的を見失ってしまうのです。結果、深く考えられていない、薄っぺらい計画書が出来上がってしまいます。\n考えなくなるから、という理由で雛形を作らない会社もあると聞いたことがあります。しっかり考え行動する社員を育てるという目的からすると正しいと思います。3人で進める規模のプロジェクトであれば上手く行きそうですが、100人規模のプロジェクトだとどうでしょう？100人に対して、\n暗黙知\nを完璧に伝えるのは非常に難しいと思います。普通はこうだろう、の普通の感覚が異なる人たちの集まりです。無法地帯になりかねません。\n雛形のメリット、デメリットをお話ししました。一番良いのは、雛形のメリットは出しつつ、デメリットを軽減することだと思います。それに向けては、こんなやり方はいかがでしょうか？\nまずは雛形を使わずに考え、必要な要素を洗い出してみる。目的を意識して考えることが重要です。その後、考えた要素と雛形を比較して、不足していることが無いか？チェックする。そして、雛形に基づいて、深掘りして資料を作る。\nこの方法ですと、考えることも出来て、漏れも無くなります。結果、個人・組織の成長にもつながります。また、雛形に適合した中身の充実した成果物が出来上がります。これを、サンプル、好事例集として展開することも出来ます。\n雛形に限らず、ものごとにはメリット・デメリットがあることが多いです。メリットの効果を最大化しつつ、デメリットを軽減する工夫が大切だ、というお話しでした。",
    "url": "https://note.com/saratoga623/n/n8792bf04d161"
  },
  "2024-11-14-テスト計画のコツ": {
    "title": "テスト計画のコツ",
    "text": "2024-11-14T06:59:16+09:00\n\nここ数回はテストをテーマにお話をしました。テストが難しいのは、こうすれば必ず上手くいく、という決まった答えが無いところです。プロジェクトの特性やメンバーのスキルなどに応じて、プロジェクトにマッチした最適解を導き出す必要があります。テスト計画の中で議論を重ね、最適解を作り上げるのです。\nレアケースも含め、テストバリエーションを多くこなせば、バグをしっかり摘出でき、品質が向上します。でも、\n工数\nがかかります。品質と\n工数\nの\nトレードオフ\nが顕著にあらわれるのがテスト工程です。\n工数\nをかけて品質をあげる、というのは無策です。効率的に（\n工数\nをかけず）品質をあげる方法はないのでしょうか？まずは、このテーマを考えることから始めましょう。\n例えば無影響確認ですと、現新比較で一致していれば安心ですし、品質も担保できます。また、ツールを使った確認も可能となり効率的に確認ができます。開発環境の制約などもあり、すべてのケースで現新比較ができる訳ではありませんが、現新比較がしやすい設計にしておくことで解決できる話かも知れません。テスト効率化は、基本設計時点で考えておく必要があるのです。\n次に考えるのが、テストのゴールです。100点を目指すのか？70点にするのか？これにより大きく\n工数\nが変わってきます。問題が発生しても、対外影響は無いタイプのプロジェクトだから70点にしましょう、という塩梅。時間とお金が有り余っているのであれば100点を目指せば良いかと思います。しかし、大抵のケースでは限られた時間とお金の範囲で対応する必要があるのです。\nそれをテスト計画でユーザーと合意すること。合意に向けては、大きく2つのポイントがあります。\n① やらないことを書く\nこういう確認をします、こういうバリエーションを投入しますなど、やることは計画書に書かれています。しかし、やらないことが書かれていないことが多く、ユーザーとの認識相違を生んでしまいます。ユーザーは当然やると思っているのです。やらないことを明確に伝えて、問題・懸念があれば伝えてもらう。ユーザーと必要性を議論すればよいのです。テストの後半で、何でやってないんですか？と揉めていては手遅れです。揉めるなら計画時点で揉めておき、決着してからテストを開始するのです。\n② やらない理由を明確にする\nこれはやりません、だけでは納得感がありません。何故やらなくても良いと思っているのか？やらなかった場合どこにリスクがあり、○○の対策をすることで回避できるなど、明確にする必要があります。大変だからやらないでは無く、時間とお金に制約があるから工夫しているのです。その工夫を明確にし、ユーザーに説明するのです。",
    "url": "https://note.com/saratoga623/n/nce0cc206c35d"
  },
  "2024-11-13-テストの目的": {
    "title": "テストの目的",
    "text": "2024-11-13T07:00:23+09:00\n\n前回はテストで炎上した時の話をしました。今回は、そもそもテストは何故行うのか？テストで確認しておくべきポイントについてお話しします。\n料理に例えてみたいと思います。材料を切って炒めます。醤油・塩で味付けをします。これが製造工程ですね。その後、食卓に並べる前に味見をします。これがテスト工程だと考えてください。\n目的は美味しい料理を作ることです。味が薄いと感じました。これがバグです。そんな時は製造工程に戻り、塩を足したりします。そして再度、味見（テスト）をし、美味しくなったことを確認するのです。材料を切り、炒め、味付けしただけでは、美味しく出来ているか？わかりません。味見→修正→味見→修正を繰り返し、最終的に美味しい料理が完成すればよいのです。\n味見をして塩を足す行為、全然悪いことではないですよね？しかし、\nシステム開発\nにおいては、バグは悪であると勘違いしているケースがあります。バグが1件出ただけで、何をやってるんだ！気をつけろ！という塩梅で、過剰に問題視してしまうのです。\n少し冷静に考えてみましょう。テストの目的はバグを出すことなのです。バグを修正し、システムを100点に近づけていくフェーズなのです。バグが出たら、冷静に修正・再発防止・横展開をすればよいのです。\nバグが1件出たら、即遅延するプロジェクトがあります。これもテストはバグを出すものだ、という原則を意識できておらず、バグ修正の期間を計画に盛り込んでいないことが原因なのです。想定以上にバグが出てしまうのは問題ですが、一\n定量\nのバグが出る前提で計画を作ることが重要です。\nでは、何件のバグが出るのが妥当なのでしょうか？目安として、バグ密度という指標があります。バグ密度は、バグ数 ÷ 規模で求めるもので、この数字がある一定の範囲に収まるバグ数が妥当とされるものです。しかし、あくまでもひとつの指標であり、範囲に収まったから問題がないと言い切るのは危険です。\n料理の話に戻します。過去に何百回と作ってきた料理や、ソースがセットになっていて、特別な味付けが不要な焼きそばなんかは、失敗することは少なく、バグが出る可能性も低いでしょう。レシピも無い状態で、料理の素人が作るフランス料理のフルコース。これは、大量のバグを覚悟しておく必要があります。\nシステム開発\nも同じで、プロジェクト特性や難易度、メンバーのスキルなどに応じて、バグ数の適正値は変わります。テスト開始前に、想定されるバグ数を予測しておく。それくらいのバグが出る前提で計画しておく。想像と違う結果になれば、品質を疑うなど、何かがおかしいと判断し対策の必要性を議論することが重要です。",
    "url": "https://note.com/saratoga623/n/n4b4225628396"
  },
  "2024-11-12-立ち止まる勇気": {
    "title": "立ち止まる勇気",
    "text": "2024-11-12T06:38:45+09:00\n\nシステム開発\nは、設計、製造、テストの順番で進んでいきます。設計工程、製造工程は順調だったのに、テスト工程で大炎上・・・というプロジェクトを見かけることがあります。\nテスト工程は結果がわかる工程です。実際に処理をした結果としての最終成果物が出てくるフェーズです。エラーの発生や、要件とは違う結果を体感するフェーズなのです。\nテストではバグを摘出します。プロジェクトの規模に応じて、バグが何件くらい出るのが妥当か？という指標があります。この規模だと、バグの数は15個から30個くらいが妥当だ、という指標。テスト開始直後に、上限の30個を大幅に超える200個のバグを摘出しました。エラーが多発して、処理を動かすだけで精一杯。成果物も要件通りではなさそうだけど、検証する体力も無い。まさに、この世の終わりのような状況です。\nユーザーと合意したスケジュールを守らなければいけない、合意した要件にしなくてはいけない、という使命感もあります。何とか課題を解決しながら前に進めようとしがちです。しかし、大きすぎる課題解決とプロジェクト前進の両立は非常に困難。気合いと根性で、毎日終電まで働くも、なかなか前進しない。やれどもやれども光が見えず、精神的にも疲弊することになります。\nそもそもテストで炎上するのは、前工程の設計・製造の品質が悪いことが原因です。90点の品質になっていれば、テストで残りの10点を取りに行けば良いのですが、20点の品質でテストに突入したから炎上しているのです。\n20点の状態でテストを進めるには、非常に大きなオーバーヘッドがかかります。20点に合致する進められるケースとそうでないケースの切り分けや、DB誤更新による\nリカバリ\nー、成果物の検証も既知バグが存在することを前提に気を遣いながら行う必要があります。そして、管理の難易度が一気に上がるのです。\n炎上した時は、勇気を出して立ち止まる。テストを止めて、設計・製造の再点検と修正をしてからテストを再開すべしです。炎上したことで、悪かった部分が見えてきているはず。その原因・真因を見つけ、対策、横展開、再発防止をやり切るのです。\nプロジェクトの延伸は避けたい、コスト超過は避けたい、ユーザーに迷惑をかけたくない気持ちがあり、テストを止める決断をするのは容易ではありません。しかし、炎上度合いにもよりますが、延伸・コスト超過は避けられないのです。逆に、テストを止めた方が被害を抑制できます。延伸やコスト超過の幅を狭め、結果ユーザーに対するご迷惑も最小化することにつながります。\n立ち止まるということは、社内にも、ユーザーにも説明が必要です。感情的な反応もあるとは思いますが、丁寧に論理的に、立ち止まる方が良いという説明をするのです。\n炎上させてしまったことに対しては、開き直ることなく反省する。このあとのプロジェクト運営や、今後のお仕事につなげていくのです。それが組織・個人の成長に寄与します。",
    "url": "https://note.com/saratoga623/n/n4eb63148a5bc"
  },
  "2024-11-11-変更管理の要諦": {
    "title": "変更管理の要諦",
    "text": "2024-11-11T07:01:58+09:00\n\nプロジェクトを進めていくと、ユーザーから要件変更を要求されることがあります。要件定義の時にしっかり考えられていなかったこともあるでしょう。基本設計レビューや、テスト結果を確認する中で要件の不足に気づくなど、変更要求のトリガーはいろいろだと思います。\nこの変更要求をすべて受け入れると、どうなってしまうでしょうか？当初想定していなかった要件ですから、コスト、納期に影響がでてしまいます。コスト増やプロジェクトの延期はユーザーにとっても簡単に許容することは出来ません。そこで、変更要求は必ず文書化し、ユーザー側、開発側双方の責任者の承認をもって反映する仕組みをプロジェクト計画段階で合意しておく必要があります。この仕組みに基づいて運用・管理することを変更管理と言います。\nこの変更管理、構造はすごくシンプルです。要件変更をすれば、追加コストが必要となり、プロジェクト延期の可能性が出てきます。逆に要件変更をしなければ、コスト・納期影響は無い代わりに、ユーザーが我慢することが増えます。コスト・納期と変更要求を叶えることはバーターになります。これぐらい我慢できるだろうと判断できるのであれば、変更要求を取り下げる。これをやらないと法律違反になってしまうというのであれば、コスト増はやむなしと考え取り込む。\n全体最適\nで決断ができる責任者・決裁権限者に判断を仰ぐ必要があるのです。担当間だけで進めてしまい、責任者・決裁権限者の知らないところで方針を決まることは、あってはいけないのです。\nもうひとつ、リスクも判断基準に入れる必要があります。開発の前半で出てきた変更要求であれば、\nシステムテスト\n開始までに追いつく可能性が高いです。しかし、後半戦での変更要求は慎重に判断すべきです。\nシステムテスト\nに合流出来ませんし、このタイミングでの大幅な改訂となると、\nデグレ\nのリスクも出てきます。変更を入れることで、プロジェクトのゴールを遠ざけてしまうかも知れません。\nまた、変更管理はユーザーの要望だけが対象ではありません。設計の考慮漏れであっても、変更管理の対象とすべき局面もあるのです。\nシステムテスト\n工程で、大規模な改訂が必要となる考慮漏れが判明しました。気合いと根性だけでは間に合いそうにありません。このケースでもユーザー要望と同じく、取り込みの要否を判断する必要があります。納期を優先し対応を諦めるのか？スケジュール変更してまでも対応するのか？責任者・決裁権限者の判断が必要なのです。\nユーザー要望であろうがなかろうが、大きな変更が入るとコスト・納期に影響が出てしまいます。それをコン\nトロール\nするツールが変更管理であり、有効活用することがプロジェクト成功の鍵なのです。",
    "url": "https://note.com/saratoga623/n/n5b474a60e5c6"
  },
  "2024-11-10-早く開発するためには": {
    "title": "早く開発するためには",
    "text": "2024-11-10T07:46:12+09:00\n\nどんな\nシステム開発\nでも、早くできることに越したことはありません。早く開発すれば、早く新サービスを世の中に発表することが出来ます。改善対応であれば、効果の早期刈り取りが出来ます。早く開発することが出来れは、良いことばかりなのです。\nしかし、そうは問屋が卸しません。開発費用がかかれば、それなりに開発期間が必要となります。投入\n工数\nと開発期間の関係は、計算式で示されているのです。\n標準工期（月数）＝投入\n工数\nの立方根×2.5、という一般的な計算式があります。この式を使うと1,000人月のプロジェクトだと、25ヵ月かかることになります。各会社で、過去実績から導き出した独自の計算式を使っているケースもあるかと思います。\nこの計算式を使いユーザーに25ヶ月かかると説明しました。ユーザーから、もっと早く開発してよと言われ、何の根拠もなく精神論だけで工期を短縮してしまいました。この判断は危険なんです。工期を短縮すればするほど、プロジェクト失敗可能性があがると言われています。もちろん、工夫して工期を短縮する努力は必要ですが、2分の1など大幅に短縮することは困難です。今後、生成AIの活用で開発スピードの向上は期待できるかも知れませんが、今現在ではそのような話は私の耳には届いていません。\nここまでは、開発期間を短くするのは難しいという話でした。でも、早く新サービスを世の中に出したいのです。どうすれば良いのでしょうか？\nひとつの答えは、要件定義工程の短縮です。要件定義で時間がかかる理由を考えてみましょう。それを解決すれば、短縮できるはずです。\n① 夢が大きすぎる\n要件定義書に壮大な夢が語られているケースがあります。例えば\nAmazon\nのようなネットショッピングサイトを開設するプロジェクトがあったとします。顧客の\nSNS\nの履歴をすべて検索し、その人の嗜好にあった商品を0.5秒で10個表示したい。しかも1,000万人が同時にアクセス出来るようにという要件が出てきました。これ、やろうとしたら出来るかも知れませんが、めちゃくちゃお金と時間がかかります。こんなシステムを作って果たして費用対効果があるのでしょうか？これを現実に落とし込むのに時間がかかるのです。最初からユーザーに自由に考えてもらうと夢が出てくることがあります。システム担当は夢を叶えるのが仕事だと思っているユーザーもいるかも知れません。考える前に費用対効果などの現実を見る方向に誘導することが大切です。一度夢を出してしまったら、夢をたたみたくなくなるのです。\n② お金が足りないとの戦い\nマクド\nナルドで、\nビッグマック\nを100円で売ってくれと言っても売ってくれません。また、そんなことを言う人もいないでしょう。でも、\nシステム開発\nの世界ではあり得るのです。オーダーメイドかつ形が見えない商品ですから、値段が想像し辛いのです。1億と値付けしても、そんなにかからないでしょ？もっと工夫してよって話になり、なかなか折り合いがつかないのです。多少の努力は出来るかも知れませんが、8割引にはならないのです。何かしらの要件を諦めるしかありません。\n①②を回避出来ればスピードUPします。必要なのはシステム\nリテラシー\n。開発側が要件定義段階から噛み込むことが重要なのです。システムを知った上で業務やサービスを知る。これが最強なのです。",
    "url": "https://note.com/saratoga623/n/n86e1fd5745c5"
  },
  "2024-11-09-責任って何？": {
    "title": "責任って何？",
    "text": "2024-11-09T07:41:34+09:00\n\n前回は承認・権限と責任はセットだ、という話をしました。例えば10億規模のプロジェクト。新入社員に権限や責任を与えられることは無いでしょう。10億のプロジェクトの責任が取れる人が権限を使って、承認や決断を行うのです。\nさて、この責任という言葉。責任をとって辞めますだとか、選挙の大惨敗の責任をとって辞意を表すべきのように、ニュースでもよく聞きます。\n調べてみると、こう書いてありました。責任とは、後に起きうること、または既に起きたことの原因が、行為者にあると考えられる場合に、その行為自体や行為の結果に関して、対処する任務や義務である。\nうーん。わかったような、わからないような。でも、お仕事において責任をとるとは、以下のように考えると良さそうです。\n目標に到達しなかったときに、その（悪い）評価を受け入れること。\n自分たちの非が原因で、大赤字を出してしまいました。プロジェクトの責任者は、大赤字にしてしまったことに対する評価を受けることになります。処遇が下がることもあり得るのです。これが責任を取るということです。\nもし、新入社員が自分の権限以上のことを責任者の判断を仰がずにやってしまいました。それが引き金となり、プロジェクトが大赤字。さて、この新入社員は責任を取れるでしょうか？責任者の評価を下げる代わりに、新入社員の評価を下げる、という話にはなりません。やはり責任者の評価が下がってしまうのです。\nつまり、何かしらの判断は、権限を持っている人が行うことが必須です。もちろん権限者に対して、決めてくださいと丸投げするのはよろしくありません。これだと権限者の実力が組織の実力上限になってしまいます。自分で考えた内容や判断材料を権限者に渡し、ジャッジしてもらう。メンバーひとりひとりが考え、様々な意見をぶつけることで、より良いやり方が生まれ、権限者の実力以上の成果が期待できます。しかし、最終どのやり方にするかを決めるのが権限者なのです。\nまた、必ず権限者の判断が入るような仕組み、ルールを作ることも大切です。レビューも仕組みのひとつ。レビューで権限者の承認を得なければ次に進めることが出来ません。ルールをしっかり守っていれば、自然と権限者の判断が入るようななっていることが多いのではないかと思います。大事なのは、ルールを守ることです。\n責任に応じた権限がある。権限があるから責任がある。組織で働く上で、大切な考え方だと思います。",
    "url": "https://note.com/saratoga623/n/nba5d2af1a309"
  },
  "2024-11-08-手戻りはもったいない": {
    "title": "手戻りはもったいない",
    "text": "2024-11-08T07:13:01+09:00\n\nレビューで根底を覆すような指摘を受けて、大幅な手戻りが発生した経験はないでしょうか？\nレビューの段階まで来ているということは、かなり時間をかけて成果物を作り込んだ状態だと思います。それを根底から覆されてしまったわけですから、この1週間の作業がムダになってしまったってことになるのです。しかも、残業して頑張ったのに。そんな時は、以下のような心理状態になりやすいかと思います。\nレビューでひっくり返された。\n気持ちはわかるのですが、心底このように思っていたら成長はありません。ひっくり返されたのにはわけがあります。\nプロジェクトは組織で対応するものです。そこには、プロジェクトのルール、組織のルールがあります。\nシステム開発\nのお仕事ですと、最終的には合格レベルの品質のシステムを期限通りに仕上げる必要があります。これを実現出来なければ、誰かが責任を取らなければいけないのです。\n誰が責任を取るのか？プロジェクトのルール、組織のルールで定められているのではないかと思います。だれだれに責任があるとは示されていないかも知れませんが、少なくとも誰に承認権限があるかは明確になっているのではないでしょうか。承認と責任はセットです。承認したら、その結果に対して責任が生ずるのです。\nレビューも承認の場です。レビューを受ける側の立場ですと、レビューは成果物を承認してもらう場です。しかし、レビューする側の立場では、レビューは責任を背負う場なのです。\nですから、どれだけ頑張って、残業して作った成果物であっても、求める品質に到達していなければ、修正を求める必要があります。たとえ大幅な手戻りになったとしても、修正を求めることになるのです。これが、レビューでひっくり返されたのメ\nカニ\nズムです。\nでは、どうすれば手戻りを抑制することが出来るでしょうか？まずは、誰が承認権限を持っているのかを把握することです。プロジェクトのルールや、組織の職務権限を記したドキュメントに書いてあると思いますので、それを確認しましょう。大切なのは、承認権限者と早めに方向性を合わせておくこと。成果物を作り切ってから、レビューという形で方向性を合わせに行くから大幅な手戻りになるのです。成果物がなくとも、メモレベルで方向性を合わせることは出来ます。作り始める前に、承認権限者とすり合わせることで、手戻りは大幅に減るはずです。\n承認権限者は、いわゆる偉い人だったりします。事前にすり合わせをするために、そんな偉い人に時間を取ってもらうのは申し訳ない、という気持ちもわかります。しかし、大幅な手戻りはプロジェクトにとって大ピンチ。逆に偉い人の手を煩わせてしまうことになりますし、偉い人もきっと早めに相談して欲しいと思っているはずです。\nとは言え、なかなか難しいのであれば、工程の変わり目で承認権限者と必ずすり合わせをすることを、プロジェクトのルールにしてしまうのです。ルールがあれば、お互いやりやすくなると思います。",
    "url": "https://note.com/saratoga623/n/n5449b349bd64"
  },
  "2024-11-07-コスト管理でよくある話": {
    "title": "コスト管理でよくある話",
    "text": "2024-11-07T07:00:22+09:00\n\n私が子供の頃、近所に建築中の家がありました。１年経っても、全く進捗しておらず、作りかけのまま。噂によると、途中まで作ったもののお金がなくなってしまい、中断してしまったとのこと。その家は完成することはありませんでした。\n途中まで作るお金をかけたにもかかわらず、最終的に住めない家が出来上がるって、非常に悲しいですね。そうならないようプロジェクトでも、ゴールまで使えるお金を計画的に残しておく必要があります。\nここからは、お金ではなく、\n工数\nで話をしようと思います。このプロジェクトは100人月で終わらせる必要があります。この100人月は、開発側が見積もった数字であり、リスクを鑑み、バッファを乗せて少し大き目に出しています。つまり、順調に進めば、\n工数\nが余った状態でプロジェクトが終わるはずです。\nしかし、\n工数\nを余らせて終わるプロジェクトは多くはないような気がします。ピッタリ\n工数\nを使い切る、\n工数\nが不足してしまうケースが多いのです。当然、想定していなかったことが起きて、バッファ\n工数\nを使うこともあるでしょう。しかし、比較的順調に進んでいたプロジェクトでも、\n工数\nが余らないことがあるのです。\nその原因のひとつは、時間感覚のズレだと思います。タスクを指示する側は期限を指定します。とあるタスクを1週間でやってくれと、メンバーに指示しました。実はこのメンバーは、このタスクを3日でこなす実力を持っていました。さて、このタスクを3日で終わらせるでしょうか？もしかしたら、期限通りやってしまうかも知れません。\n逆に、2日でやってくれと指示したらどうでしょう？今の実力では、少し難しいですね。だから努力、工夫するようになります。早めの相談、方針の合意など、2日でやり切る行動を促し、問題があれば早めの検知を実現するのです。\nこのように、\n工数\nはあればあるだけ使ってしまうのが世の常ではないかと思うのです。PMや指示をする側が、緩い期限設定をしてしまうと、必要以上に\n工数\nが使われてしまいます。適切な時間感覚をもって、少しストレッチした目標をメンバーに与えることが重要だと思います。\nただ、言うは易し。適切な時間感覚を持つのは非常に難しいです。メンバーによって、スキルも得意分野も異なりますから、メンバー毎に目標を変える必要があります。また、10日かかるタスクを1日でやれ！というのは、ストレッチした目標ではなく、ただの無謀です。場合によっては、メンバーが病んでしまう事だってありえます。\n時間感覚は、すぐに身につくものではありません。自ら手を動かして開発する経験、リーダーの立場で指示をする経験を通じて、失敗しながら身についていくものだと思います。",
    "url": "https://note.com/saratoga623/n/nefb1a8f383fb"
  },
  "2024-11-06-プロジェクトは性悪説がちょうどいい": {
    "title": "プロジェクトは性悪説がちょうどいい",
    "text": "2024-11-06T06:47:37+09:00\n\nこれまでの記事でお話ししたことを、一言で説明するのであれば、こうなると思います。\nプロジェクトマネジメントは、性悪説で行うこと。\nプロジェクト計画では、計画通りに進まないときにどうするか？を示す。進捗報告では、報告内容を疑う。\nリスク管理\nでは、心配毎はすべて洗い出す。課題は大きくなる前に解決してしまう。まさに、心配性がなせる技です。心配性になり、\n性悪説\nで進めましょうという話です。\n楽観的に上手くいくイメージを持って、明るい未来に向けて邁進したい欲求はあります。その方が楽しそうですからね。でも、特に大規模なプロジェクトとなると、これから起こることをすべて見通すことはできません。何かあっても何とかなるだろう、大丈夫なはずた！という根拠のない自信だけでは、想定外を乗り越えることは難しいのです。\n災害に備え、水や食料を備蓄しておく。大きな病気になることもあり得るから、\n医療保険\nに入っておく。日常生活の中でも、最悪を想定した準備をします。これと同じで、プロジェクトも最悪を想定し、マネジメントする必要があります。\nでも、大\n地震\nが発生したらどうしよう、ガンになってしまったらどうしよう、このような心配ばかりの生活より、未来に向けて希望のある生活を送りたいものです。プロジェクトも心配することは大事なのですが、これだけでは寂しい。明るく前向きに、楽しみながら進めたいものです。\nそれに向けては、達成を喜ぶ、成長を喜ぶことにします。長きに渡るプロジェクトであっても、小刻みに達成感を味わえるよう、スモールゴールをいくつか設定します。ゴール毎に、大袈裟に喜んでしまえばよいのです。\n課題が見つかったとしても、凹む必要はありません。課題は発生するもので、それは織り込み済み。やっぱり課題が出たか！というトーンで笑い飛ばしちゃうくらいがちょうどいいと思います。解決したら、成長に繋がりますし、大袈裟に喜べばよいのです。\nなぜ課題を笑い飛ばすことが出来るのか？それは、課題は出るものと想定していたからです。想定していたら、どーんと構え、冷静に対応が出来るのです。\n性悪説\nで考えることが、結果的にイキイキワクワクとプロジェクトを進めるカギとなるのです。",
    "url": "https://note.com/saratoga623/n/n369d057f6aa3"
  },
  "2024-11-05-対策検討の極意": {
    "title": "対策検討の極意",
    "text": "2024-11-05T07:03:53+09:00\n\n前回は、真因にはパターンがある。人を疑わず、インプットや仕組みを疑え！という話をしました。今回は対策検討の極意です。\n精神論は捨てろ！徹底する、周知するは精神論だ！有識者任せの対策は最終手段だと思え！\n一番のポイントは精神論に委ねないことです。例えば、日本の信号無視をゼロにする目標を立てました。日本国民全員に周知し徹底させます！と言ったところで、信号無視はゼロにならないと思います。なかなか精神論だけでは、統制はとれないものなのです。\nシステム開発\nの話をします。前回の記事のとおり、インプットが悪いを真因に設定しました。ここまでは正しいです。具体的には外部インタフェースの項目設定要領の記載が無かったとします。対策は、相手先・外部先との認識合わせを再徹底する。この再徹底が精神論なんです。\n真因はインプットが悪いか、仕組みが無いかのいずれかです。だとすると、対策はインプットを修正する・充実させる、インプットが無かった部分を点検する、仕組みを作る、仕組みが無かったところを点検するになるはずです。精神論では無くて、対策はやらなくてはいけない行動がイメージできるレベルまで具体化する必要があります。\n精神論レベルの対策は、やることが不明確です。よくわからないから、\n有識者\nに任せようという発想になりがちです。そして、\n有識者\nは基本的に忙しいですから、なかなか対策が進まなくなります。しかし、精神論から脱却した具体的な対策であれば、\n有識者\nでなくとも出来ることが見えてきます。メンバー全員で対応し、スピード感を持った対応が出来るようになります。\nただ、課題の状況次第では、一刻も早く対応しなければ、最悪の事態を招くこともあるでしょう。何よりも、この対策が最優先であれば、\n有識者\nに頼らざるを得ないこともあるでしょう。しかし、これは最終手段。まずは、\n有識者\nに頼らない方法を考えることが肝心です。\n今回の話は課題解決以外にも活用できます。例えば、研修受講後に書く所感。研修の学びを今後に活かすべく、アクションプランを書く局面を想像してください。例えば、多角的に思考できるよう努める。これも、頑張りますと言っているだけの精神論です。また精神論のアクションプランは実行されないことが多いです。どうすれば多角的な思考ができるようになるのか？自分自身がそのイメージを持っていない可能性が高いからです。もうひとつの理由は、アクションプランを実行しているかどうか？が、第\n三者\nにはわからないこと。多角的な思考をしているか？は形として見え辛いのです。アクションプランも具体的な行動ベースに落とし込み、出来てる、出来ていないを上司が評価できる状態になっている事が望ましいです。",
    "url": "https://note.com/saratoga623/n/nf4465438484a"
  },
  "2024-11-03-真因分析の極意": {
    "title": "真因分析の極意",
    "text": "2024-11-03T14:28:48+09:00\n\nこれまで、原因・真因を正しく捉え、課題解消・再発防止・横展開をやっていく話をしましたが、今回は真因分析の総決算。私が考える真因分析の極意はこれです。\n感情は捨てろ！人を疑わず、インプットと仕組みを疑え！\n少し解説したいと思います。以下はよく見る真因です。果たしてこの真因は正しいのでしょうか？\n① 担当のスキル不足\n② 精査者のチェック漏れ\n③ 担当の作業漏れ\n④ 設計の考慮不足\n⑤ コミュニケーション不足\nこれらの真因は、人、メンバーのせいにしてしまっているのです。何故、メンバーが上手く出来なかったのか？まで突き止める必要があります。すると、大抵の場合は以下のような真因に辿り着きます。丸数字はリンクしていますので、見比べてください。\n① 基本設計の記載漏れ\n② 精査者のチェック欄がなく精査不要と思った\n③ 手順が無かった\n④ 現行仕様調査が出来ていなかった\n⑤ 会議体がなかった\n真因は、無限のバリエーションがあるわけでは無く、どんなプロジェクトでも似たようなものになります。このいくつかの型を自分の中に持っておくことをお勧めします。また、真因のパターンは、インプットが悪い、仕組みが無いのいずれかなのです。このパターンに当てはめると考えやすいと思います。\nこのように、冷静にインプットと仕組みを疑うことが出来れば良いのですが、感情が邪魔をするのです。原因は、少し気をつければ回避できるようなミスだったりします。そんなミスが原因で大きなトラブルにつながってしまいました。ミスをした担当を責めたくなってしまいます。その感情が真因分析を狂わてしまい、担当のスキル不足という、メンバーのせいにする真因を設定してしまうのです。\n責めたくなる気持ちはあっても、横に置いておく。感情を入れず、冷静にインプット・仕組みを疑うことが大切です。",
    "url": "https://note.com/saratoga623/n/n94d731aafd2d"
  },
  "2024-11-02-なぜを5回繰り返してもダメな理由": {
    "title": "なぜを5回繰り返してもダメな理由",
    "text": "2024-11-02T08:03:15+09:00\n\n今回も引き続き真因についてです。よく、なぜを5回繰り返すと真因にたどり着くと言われています。果たしてこれは本当でしょうか？\n闇雲になぜを繰り返しても、真因にはたどり着けません。コツが必要なのです。\nユーザーに言われた通りの設計をしました。その結果、性能に問題のあるシステムが完成してしまいました。レスポンスが悪く、それがストレスにつながります。どうしてこんなことになってしまったのでしょうか？なぜを繰り返してみましょう。\nまずは、ユーザーに言われた通りにしてしまったから。なぜ、言われた通りにしてしまったか？それは、ユーザーとの関係性悪化を恐れたから。なぜ、関係性悪化を恐れたのか？それは、日本人は和を重んじる傾向があるから。なぜ、和を重んじるのか？それは、日本は島国だったからだ、といった具合。なぜを繰り返した結果、日本が島国であることが真因となってしまいました。これは、何ともし難いですね。\nでは、どうすればよかったのでしょうか？なぜなぜ分析が変な方向に行ってしまったのは、他人やおかれている環境のせいにしているからです。いわゆる他責なんです。他人や環境は、自分でコン\nトロール\nできません。だから、日本は島国といった解決\n不能\nな真因が出てきてしまうのです。\nなぜなぜ分析のカギは、自責で考えること。主語を自分にして考えることです。なぜ、ユーザーに言われた通りにしてしまったのか？それは、自分が断らなかったから。なぜ断らなかったのか？性能の観点を漏らしていたから。なぜ観点をもらしたのか？取引件数予想が出来ていなかったから。\n自責で考えると、再発防止策も横展開策も、自分を主語にすることが出来るようになります。自分で出来るコントローラブルな対策にすることができます。\n逆に他責で考えてしまうと、他人に頼る、環境が変わることを期待するしかなく、まさにアンコントローラブルな世界。プロジェクトの成功は運に委ねられることになってしまいます。",
    "url": "https://note.com/saratoga623/n/nc612ec6d01f7"
  },
  "2024-11-01-原因と真因": {
    "title": "原因と真因",
    "text": "2024-11-01T07:12:00+09:00\n\nこれまでは、原因を正しく捉え、その上で対策を考えましょうという話をしてきました。今回は、真因という言葉を登場させます。\nまずは言葉の定義から。原因とはものごとを生じさせた要因のことです。真因とはあるものごとが起こった真実の原因であり、もっと根本的なそもそもの原因のことです。少しイメージが湧き辛いですね。例を挙げて説明します。\nAさんは、学校で先生に注意されたとします。原因は宿題をやってこなかったから。何故宿題をやってこなかったか？Aさんにはメモをする習慣がありませんでした。宿題が何か？もメモらず、自分の記憶に頼っていたのですが、その記憶が誤っていたというものでした。これが真因です。\n宿題をすれば、先生から注意されなくなります。しかし、真因を解決しなければ、再び宿題を忘れるでしょう。逆に真因を解決させれば再発防止が出来るのです。また、Aさんと同じクラスに宿題のメモを取らない生徒がいたら、同じように宿題忘れのリスクがあるということ。彼らにもメモを取らせるのが横展開です。\nこのように直接な原因だけでなく、真因まで見極めることで、まだ見つかっていない課題発見や、未来の課題発生を抑制することが出来るのです。\nシステム開発\nにおける真因とは、どのようなものでしょうか？テストで不具合が見つかったとします。原因は詳細設計の不備でした。何故詳細設計の不備が発生したかが真因です。よくやりがちなのが、経験の浅い担当による考慮漏れ、といった真因設定。考慮を漏らしたのは事実かも知れませんが、もう一歩踏み込む必要があります。何故、経験の浅い担当が考慮をもらす状況、環境になっていたのか？を考えるのです。\nインプットの基本設計に書かれていた内容に行間があり、経験が浅いメンバーでは読み解くことが出来なかった。開発のお作法のレクチャーを受けておらず、ルールを守ることが出来なかった、などなど様々な理由が考えられます。\nこのレベルの真因まで踏み込んで、ようやく再発防止や横展開が出来るようになるのです。",
    "url": "https://note.com/saratoga623/n/na886cfb18340"
  },
  "2024-10-31-報告の目的って何？": {
    "title": "報告の目的って何？",
    "text": "2024-10-31T05:58:00+09:00\n\nタイトルからは想像し辛いかも知れませんが、課題解決に向けた話です。以前、プロジェクトや課題解決は個人ではなく組織で進めるものだ、という話をしました。今回はそれを少し深掘りしたいと思います。\n大抵のケースでは、週次や月次でプロジェクトの進捗報告があるのではないでしょうか？メンバーがPMに報告する、PMが社内のマネジメント層に報告する、開発側がユーザーに報告するなど、複数のレイヤーで報告がされていると思います。\nさて、そもそも何の為に報告をしているのでしょうか？\nまずは良くない例から。プロジェクトで遅延が発生しています。正直に遅延報告をしましたが、報告を聞く側の反応はありません。最後に、じゃあ遅延解消に向けて頑張ってくれと言うのみ。これ、何も生み出していません。報告することが目的の進捗報告になってしまっています。どこに問題があるのでしょうか？\n① 報告を聞く側の問題\n報告を聞く側は遅延に限らず、全ての課題について組織で解決する姿勢を持つ必要があります。遅延報告を聞いて「じゃあよろしく」としか言わないのは、解決をメンバーに丸投げしていることになります。メンバー自らが解決出来ると判断出来れば任せる。メンバーが解決策を持っていなければ、気づかせる。メンバーが答えを持っていなければ、\nティー\nチングとして策を提示することが必要です。メンバーは勇気を出して正直に課題を報告してくれているのです。その勇気にしっかり応える。課題解決が進む状態をメンバーにプレゼントするのです。解決に向けては、メンバーを追加投入するなど、ヒト・モノ・カネが必要な局面もあるでしょう。自身にその決裁権限がなければ、更に上やユーザーに\nエス\nカレーションするのです。報告を聞く側はその役割を担っているのです。\n② 報告する側の問題\n課題を報告するゴールをどこに設定するか？がポイントです。上司に課題を聞いてもらうことがゴールだとすると、課題解決からは遠ざかるのみ。解決に向けた次のアクションが明確になっていること、をゴールにすべきです。でも、自分の力だけではそのアクションは思いつかないことがあります。また、ヒト・モノ・カネを必要とするアクションを打つには、決裁権限が不足していたりします。だからPMや上司に助けてもらう必要があるのです。報告は助けてもらう為に行うものだ！と言っても過言ではありません。助けてもらえるまで、粘り強く報告、主張すべしです。\n報告を聞く側、報告する側が同じ思いで噛み合っている必要があります。その関係性を構築する為に、プロジェクト開始時点で課題が発生した時の動作について、認識合わせをしておくことをお勧めします。",
    "url": "https://note.com/saratoga623/n/n50ee3ec0f774"
  },
  "2024-10-30-現実的な対策を考える": {
    "title": "現実的な対策を考える",
    "text": "2024-10-30T06:37:13+09:00\n\n課題解決に向けては、対策を考える必要があります。その対策は、原因を取り除くものでなければいけません。つまり、原因を正しく捉えることが課題解決の第一歩なのです。\nしかし、正しい原因を捉えても、なかなか課題が解決しないことがあります。何故でしょう？それは、非現実的な対策になっているからです。\n少しだけプロジェクトの話から脱線します。最近、山に住んでいた熊が住宅街にやってきてしまう、というニュースをよく見かけます。この原因は何でしょう？\n異常気象が続き、山にある熊の食べ物が減ってしまったから、食べ物を探しに熊が人里に来るようになったと原因を設定しました。私、熊の専門家ではありませんので、この原因が正しいかどうか？わからないのですが、仮に正しいとします。異常気象が原因です。だとすると、対策は異常気象をなんとか回避するになってしまいます。CO2の排出を抑制するとしても、すぐには効果は出ませんし、雨乞いのような対策は科学的ではありません。異常気象のみを原因と捉えてしまうと、対策検討で詰んでしまうのです。\nどうすれば良いか？異常気象以外の原因を考えるのです。熊が生息している山と住宅街の間の地域は過疎化が進んでおり、草木の手入れが出来なくなっています。結果、熊が山と人里の区別が出来ず、住宅街まで来てしまうという説もあります。この原因に対しては、お金と労力はかかりますが、草木の手入れをするという対策が打てるのです。\nシステム開発\nでも同じです。出来ない対策を考えてしまうケースが散見されます。例えば原因を\n有識者\n不足と設定してしまうケース。すると、対策は\n有識者\nをたくさん投入するになるのですが、\n有識者\nは物理的にいないのです。\n原因設定を変える必要があります。そもそも\n有識者\nに頼る作戦に無理があったということなのです。\n有識者\nに頼らずにプロジェクトを進めるにはどうすればよいか？この発想に立つ必要があります。\n非現実的な対策は、どれだけ続けても効果は出ません。場合によっては、メンバーに無駄な努力をさせることになります。原因の設定と対策検討は正確に。これにはスキルが必要となりますが、この話は後日投稿しようと思います。",
    "url": "https://note.com/saratoga623/n/n67b733fd56c1"
  },
  "2024-10-29-課題の早期発見に向けて心がけること": {
    "title": "課題の早期発見に向けて心がけること",
    "text": "2024-10-29T07:07:48+09:00\n\n課題にも大小あると思います。１タスクの遅延のような軽微なものもあれば、本番日の大幅な延期につながるような大きなものもあります。\nどんな大きな課題も最初は小さな課題だったはずです。小さな課題を放置してしまったり、対策をするも空回りしてしまい、傷口が広がり最終的には取り返しのつかないことになってしまうのです。つまり、課題が小さいときにしっかりと手を打ち、早期解消すること。それに向けては小さな課題を確実に見つけることが肝心です。\nしかし、小さな課題を見つけるのは困難です。以前、報告は多少疑うべし、という投稿をした通り、小さな課題は隠されてしまうことがあるのです。\n何故、正直に報告してくれないのでしょうか？恐らく担当は、この程度であれば自分の力で何とかなる、自分で何とかできるから、報告はやめておこう。報告する方が面倒だ、という心理状態になるのではないか？と想像できます。\n自分の力で課題が解決すれば、結果オーライです。しかし上手くいかなければ、課題が大きくなり、手に負えなくなってしまいます。自分で何とかしよう、というのは素晴らしい志です。しかし、プロジェクトは個人で進めるものではなく、組織で進めるもの。特に大きな課題は組織で解決しなくてはいけないのです。\n例えば、遅延が拡大し、他プロジェクトを担当している高スキルなメンバーを投入するしかない状況。また、この対策により、コストも超過してしまいます。さて、この判断は誰が出来るのでしょうか？他プロジェクトとの優先順位を把握し、利益の減少もやむなしと判断できる立場の人ですね。プロジェクト規模や会社のルール次第ですが、恐らく管理職、マネジメント層が判断することになります。\n管理職、マネジメント層の立場に立って考えてみましょう。これまで順調と聞いていたプロジェクト、ある日突然大きな課題があると言われても、即判断することは難しいです。心の準備も出来ていませんし、それゆえに覚悟が決まらないのです。\nやはり、課題は小さい段階からきちんと報告すること。組織で動く為には、必要な事なのです。",
    "url": "https://note.com/saratoga623/n/n711e35750802"
  },
  "2024-10-28-課題の対策を考える": {
    "title": "課題の対策を考える",
    "text": "2024-10-28T07:05:22+09:00\n\nしばらくリスクに関するお話をしてきたのですが、今回からは課題をテーマにしたいと思います。\n課題があるということは、リスクとは違って既に良くないことが起こってしまっているのです。早急に手を打って、被害の拡大を抑制する。そして、解決しないとプロジェクトが失敗してしまいます。\n急がなくてはいけないのですが、反射的に動いてしまうのも良くありません。例えば、詳細設計工程で遅延が発生したとします。遅延解消に向けて、追加でメンバーを投入しました。でも、更に遅延が拡大していきます。さて、何故このようなことになってしまうのでしょう？\n原因分析をしていないからです。何故遅延したのか？を考えず、反射的にメンバー追加という対策を打ってしまったのです。上手く行かなかったことを好転させるには、原因を取り除く必要があります。原因に応じた対策を打たなければ、課題は解消しないのです。\n遅延の原因は何だったのでしょうか？分析してみると、前工程の基本設計の品質が悪かったことがわかりました。その結果、詳細設計が上手くいかず遅延したのでした。追加メンバーを投入しても、基本設計の品質は上がりません。追加メンバーも同じ苦しみを抱えることになり、遅延はどんどん拡大するのでした。\n正しい対策は、基本設計を再点検するなど、基本設計にたち戻ることだったのです。\n課題が発生した！マズイ！急がねば！と思う気持ちはわかります。しかし、原因をしっかり見極めないと、誤った対策を打ってしまい、空振りに終わってしまうのです。\n人は最初に考えたことを正しいと思い込む特性があると言われています。反射的に思いついた対策が正しいと思い込んでしまうのです。そこで、対策を考えたら検算することをお勧めします。検算とは、算数や数学でよくやるやつで、計算の答えが正しいか、もう一度計算して確かめてみることです。課題対策にあてはめてみましょう。あらかじめ、メンバーを追加していたら遅延は発生していなかったか？想像してみるのです。それでも遅延が発生するよな、という結論であれば、この対策は間違っているのです。\n課題対策を考えるには、正しい原因を見つける力が必要なのです。原因を正しくつかむ方法については、後日お話ししようと思います。",
    "url": "https://note.com/saratoga623/n/nef7bf90f0278"
  },
  "2024-10-27-リスクを棚卸しする": {
    "title": "リスクを棚卸しする",
    "text": "2024-10-27T07:34:34+09:00\n\nリスク管理\nは少し厄介なところがあります。リスクを計上して対策を考えます。それを\nリスク管理\n表に記入します。これで満足してしまうことがあるんです。\n対策を考えることがゴールではありません。対策を実行することが重要です。対策が上手く機能しているのか？課題化の抑制に寄与しているのか？チェックする必要があるのです。\nまた、開発工程が進めば、新たに見えてくることもあるでしょう。新たなリスクに気づくことが出来るようになるのです。\nリスク対策のチェック、新たなリスク計上は非常に重要であり、定期的に実施する必要があります。週次や月次の進捗会議の中で行うでも良いのですが、私はリスクの棚卸し会として個別に行うことをお勧めします。\nリスク管理\nはプロジェクト成功の鍵。プロジェクトの規模にもよりますが、進捗報告の片手間ですますのでは無く、\nリスク管理\n目的の会議を設定するのが良いと考えます。\nその会議にはユーザーも参加するのが良いでしょう。開発側で計上したリスク。必ずしも開発側だけで対策するものではなく、ユーザーの協力が不可欠です。例えば要件変更が多発するリスク。開発側だけでは抑制は困難で、ユーザーに我慢して頂くことも必要となります。逆にユーザーが計上したリスクを開発側が対策することがあってもよいのです。\nプロジェクトはユーザーと開発側が垣根なく協力し合い、共通のゴールに向かって行くものですが、特に\nリスク管理\nは一体感を持って進めることが重要です。私の経験則ですが、これが出来ていたプロジェクトは成功プロジェクトでした。\nしばらくの間、\nリスク管理\nについてお話ししました。次回からは、課題解決のお話しをしようと思います。",
    "url": "https://note.com/saratoga623/n/nb1bfd5c42373"
  },
  "2024-10-26-言い訳をリスクで管理する": {
    "title": "言い訳をリスクで管理する",
    "text": "2024-10-26T06:39:12+09:00\n\n私たちは人間ですから、弱音を吐いたり、言い訳をしたくなるものです。私も言い訳してしまいます。でも、この言い訳がプロジェクトを傾かせてしまうことがあるのです。\nプロジェクトをなかなか上手く進められず、最終的に大トラブルが発生してしまったとします。トラブル後に、経験値の低い自分に任せたって上手く行く訳がないんだよ。そんなこと、最初からわかっていたんだよって言いたくなる気持ちはわかります。しかし、これが言い訳ですね。一番よくないのは、このように事が起こった後に言い訳することなんです。言い訳をしても、前には進みません。\n以前、リスクは心配事です、というお話しをしました。プロジェクト開始直後に心配事を言えていれば、リスクとして管理ができます。対策を打ち、課題を抑制できます。\nしかし、心配事を自分の心にしまってしまうと、対策を打つことができず、課題化してしまいます。それが言い訳につながるのです。\n言い訳も心配事も本質的に同じだと思います。事が起こってからする言い訳はやめる。言い訳もプロジェクト開始直後に全て洗い出し、\nリスク管理\nするのです。\n言い訳に対して、やる気が無いからだ！けしからん！というのは根性論です。根性論のマネジメントはどこかで破綻してしまいます。言い訳も上手にマネジメントして、プロジェクトを成功に導きたいものです。",
    "url": "https://note.com/saratoga623/n/n23854e848e53"
  },
  "2024-10-25-前提をリスクで管理する": {
    "title": "前提をリスクで管理する",
    "text": "2024-10-25T07:02:52+09:00\n\nシステム開発\nに入る前に、見積りをします。小規模な対応や、要件が明確で改定すべきプログラムが明確であれば、短期間で比較的精度の高い見積りが出来るのかも知れません。しかし、要件が緩い状況で見積りを求められたり、詳細な影響調査をやらないと、正確な\n工数\nが出せないケースは多いのではないでしょうか？\nでも、早く見積りを出して欲しいと言われます。どうすれば良いのでしょうか？\n前提を置いて見積もるしかないのです。要件が緩くて、改定範囲が特定できないものの、こんな要件になる前提とするだとか、場合によっては○○機能の３割に改定が入る前提のように、乱暴な前提を置かざるを得ないケースだってあると思います。\nもちろんあとで揉めないように、前提は文書に残してユーザーと合意する必要があります。それと同時にリスクに計上するのです。工程が進み、いろいろ見えてきて前提が間違っていたことがわかり、\n工数\n、開発期間が上振れるリスクですね。\nリスクが課題とならないよう、前提の範囲内に収める努力は必要ですが、ここで重要なのは事後対応計画。前提が間違っていた時にどうするか？をユーザーと握ることが大事です。\n前提が間違っていることを恐れてしまうと、なかなか前に進めることが出来ません。超大規模プロジェクトで、全てを見据えた形で見積りをしようとすると、見積りだけでも１年かかってしまうかも知れません。前に進めるための前提、\nリスク管理\nが重要なのです。\n当然、リスクを負えないケースもあるでしょう。そんな時はスピードを緩めるしかありません。スピードを求めるのであればリスクを受け入れる、リスクを受け入れられないのであればスピードを諦める。このバランスが大事ですし、ユーザーとはこのバランスを合意する必要があるのです。\n見積りを例に挙げましたが、\nシステム開発\nをする上で前提を置く局面は、他にも出てくると思います。そんな時は、リスクもセットで計上する。これが鉄則です。",
    "url": "https://note.com/saratoga623/n/n2fb6f4d95d28"
  },
  "2024-10-24-リスクが顕在化した時の為にやっておくこと": {
    "title": "リスクが顕在化した時の為にやっておくこと",
    "text": "2024-10-24T07:01:57+09:00\n\n前回は、リスクが課題にならないように対策を打つ話をしました。この対策のことを事前対応計画と言います。実はリスク対策にはこの事前対応計画に加えて、もうひとつ必要なことがあります。\nそれは、事後対応計画。残念ながらリスク対策がマッチせず、課題になってしまった時にどのような対策を打つのか？を事前に取り決めておくのです。なぜ事後対応計画が必要なのかを説明します。\n残念ながらリスクが課題になってしまいました。早く課題解消しないと、プロジェクトが倒れてしまいます。即対応が必要なのです。そんな中、今から対策を考えますでは遅いのです。\nまた、事後対応計画はユーザーの協力が不可欠です。仕様追加が多発するリスクであれば、追加を認めてお金を投入し、スケジュールも延伸するか？仕様追加は諦め現計画のまま進めるか？ジャッジする必要があります。これ、開発側だけでは決められません。ユーザーに決めて頂く必要があるのです。また、この決断には時間がかかりますよね。早く課題を解消したいのに、なかなか対策が決まらない。結果、手遅れになってしまうことにもつながるのです。\nだからこそ、事前にユーザーと対策を取り決めておくことが重要なのです。\nまた、事後対応計画は、スケジュールを延伸する、お金をかける、人を増やすなど、力技ではあるものの、決断には覚悟が必要なものが多いのです。ユーザー、開発側の双方で、事前にこの覚悟をしておくことが重要です。課題になってはじめて追加でお金が必要ですと言われても、準備もしていないし困るよって話になってしまいます。\n後出しジャンケン\nにならないよう、事後対応計画を上手に活用するのです。",
    "url": "https://note.com/saratoga623/n/n84be3c931cf6"
  },
  "2024-10-23-確実にリスク対策するために": {
    "title": "確実にリスク対策するために",
    "text": "2024-10-23T07:31:26+09:00\n\n前回は上手にリスクを計上するコツについてお話ししました。今回は、リスクが課題にならないよう、どのように手を打てばよいか？についてお話しします。\n例えば経験の浅いメンバーばかりが集まってのプロジェクト。お作法や手順がわからず、ズルズル遅延してしまう、というリスクを計上しました。\nよくあるのは、\n有識者\nがフォローする、のような対策。そして、PMが\n有識者\nにフォローしておいてねとお願いし、\n有識者\nはわかりましたと言う。これで対策完了。\nこれ、フォロー頑張りますって言っているだけの精神論なんです。PMはお願いして終わり。きちんとフォローしているかどうか？は\n有識者\n任せですし、フォロー出来ているかどうか？をチェックする術もありません。\nこのような精神論的な対策をよく見かけます。せっかくリスクを計上しているのに、対策が弱いのはもったいないですね。じゃあどうするか？リスク対策をマネジメントすることが大事です。\n① リスク対策をタスク化する\nf:id:saratoga623:20250119163013p:image\n有識者\nがフォローするという対策はタスクになっていません。フォローの具体的な内容がわかりませんし、期限もありません。フォローを行動が出来るレベルまでタスク分解する必要があります。手順を作る、お作法をレクチャーする、毎日相談の場を設けるなど。タスクを分解したら、\nWBS\nに計上するのです。すると\n有識者\nがフォローしていなかったら遅延という形で\n定量\n的に把握することが出来るようになります。\n② アサインする\n有識者\nは頼りにされる立場で、いろいろなプロジェクトから引っ張りだこ。忙しいんです。そんな中でフォローしておいてって言われても、時間は有限ですから出来ないものは出来ないのです。まずは、\n有識者\nにフォローするための\n工数\nを割り当てます。結果、\n有識者\nのトータル\n工数\nが120%になってしまったら、100%になるよう、何かのタスクを押しのける必要があるのです。優先度が高く押しのけるタスクがなければ、この\n有識者\nフォローの対策は成立しないので、別のリスク対策を考えることになります。余力が無い中で、気合いと根性でやり切るような対策にしてはいけません。",
    "url": "https://note.com/saratoga623/n/n755ee10472e8"
  },
  "2024-10-22-適切なリスク計上のコツ": {
    "title": "適切なリスク計上のコツ",
    "text": "2024-10-22T07:10:27+09:00\n\n前回はリスクとは心配事、プロジェクト成功に向けては心配事をしっかりあげることが大事だという話をしました。しかし、思いつく限りの心配事をあげてしまったら収拾がつかなくなります。適切なレベルでリスク計上するにはどうすれば良いのでしょうか？\nプロジェクト推進に向けて、どんな心配事が思い浮かぶでしょう？遅延するリスク、要件変更が多発するリスク、延伸するリスク、コスト超過のリスク、手戻りのリスク、悪い未来を想像するといくらでも出てきます。\nしかし、メンバーは熟練者で固められており、難易度が低いプロジェクトなら、これらリスクが顕在化する可能性は低いです。可能性が低いリスクまで管理し始めると、真に管理すべきリスク対策がおろそかになってしまいます。真のリスクとは何かを見極める必要があるのです。\nポイントは、何故遅延すると思ったのか？何故要件変更が多発すると思ったか？なんです。この理由が大事。新規参画者ばかりのチームでの開発だから遅延すると思った。ユーザーが多くいろいろな要望が出そうで、要件変更が多発すると思った、という塩梅。理由もなく、ただ心配というのは、対策が立て辛いふわっとしたリスクなのです。逆に理由を明確にすれば、対策が打ちやすくなります。リスクを\nリスク管理\n表に記載する際も、理由とセットで書くのが鉄則です。新規参画者ばかりのチームでの開発であり、お作法、手順の理解が不十分で遅延が発生するリスクと書きます。\nそうすれば対策が明確になります。プロジェクト開始前にお作法の勉強会をする。手順書の有無を確認する。手順書がなければ作る。はじめての作業では、スケジュールに余裕を持たせるなど。\n理由が無いリスクは、何となく不安だと思っている可能性が高いです。もしくは、理由に気づけていないかです。何となく不安であっても、工程が進めば理由が見えてくるかも知れません。見えた瞬間にリスク計上して対策を打つことが大切です。",
    "url": "https://note.com/saratoga623/n/n9e235d16db31"
  },
  "2024-10-21-心配事がリスクです": {
    "title": "心配事がリスクです",
    "text": "2024-10-21T19:45:16+09:00\n\n今回\nからし\nばらく、\nリスク管理\nについてお話しします。まずはリスクの定義から。よくリスクと課題の違いは何でしょう？という問いがあります。私は以下のように定義しています。\nリスクとは、ズバリ心配事です。心配事をほったらかしにしておくと、良くない未来がやってくる事がありますよね？\n3歳の子供がお金を持ってお祭りに行ったとします。お金を落とすかも知れないと心配になりませんか？まさにこれがリスク。心配だけど何も手を打たなかったら、本当にお金を落としてしまいます。解決のために警察に届けるなど、課題対応が必要となってしまうのです。そうならないように、親がお金を預かる。これがリスク対策ですね。将来課題にならないように事前に手を打つことが大切なのです。\nプロジェクトの進捗報告で、こんな話がよく出てきます。遅延の理由が、経験の浅い機能を担当したから。これ、遅延したからはじめてわかったことではありません。やる前からわかっていることなんですね。やる前に心配出来ていれば、事前にレクチャーを受けるだとか、フォロー体制を構築するなどの手が打てたのです。\nプロジェクトの成功に向けては心配事をあげること。でも、頭に浮かんだ心配事を何でもかんでもあげてしまうと、収拾がつかなくなります。次回は、真に必要な心配事をあげるコツについてお話ししようと思います。",
    "url": "https://note.com/saratoga623/n/n6e596ff87496"
  },
  "2024-10-19-報告は多少疑うべし": {
    "title": "報告は多少疑うべし",
    "text": "2024-10-19T10:41:11+09:00\n\n前回に引き続き、報告を聞く姿勢の話です。必ずしも正しい報告がされるとは限りません。多少疑う方がプロジェクトは上手く進むことの方が多いと思います。少し人間不信な感じに見えてしまいますが、プロジェクトが傾き、結果メンバーを疲弊させ、ユーザーにも迷惑がかかるという状況になってしまうよりは全然良いのです。今回は、疑うポイントをいくつか紹介します。\n① 期限が書かれていない\n報告書に期限が書かれていないのはよくありません。期限が置けないのは、もしかするとどう行動すれば良いのか？タスクのイメージがわいていない可能性があります。どういう行動をしようとしているのか？確認しましょう。\n② 動きのないタスク\n報告書に、なになにを推進中と書かれていました。翌週も推進中。その翌週も推進中。全く動きがありません。こんな時は何か問題が発生している可能性があります。この推進中のタスク、どういう状況ですか？と質問する必要があります。\n③ 理由が書かれていない\n遅延が発生しました。追加メンバーを投入し、キャッチアップをはかります、という報告を受けました。これ、遅延の理由が報告されていません。理由がわからないと、追加メンバーを投入するという対策が正しいのか？判断できません。また理由が報告されないのは、メンバーが正しく状況を把握出来ていない可能性があります。\n④ タスクの難易度を考慮する\nめちゃくちゃ難しいタスクにも関わらず、めちゃくちゃ順調に推進している。これ怪しいです。本当に順調なら問題はないのですが、そんなはずはないと考えた方が良いです。問題が隠れているか、そもそも問題に気づいていない可能性があります。\n⑤ 楽観的な報告\nプロジェクトの成功に向けては、様々な関係者と交渉・調整する必要が出てきます。なかなか難しい交渉であっても、上手くいく前提となっているケースが散見されます。上手くいかない前提で作戦を練る必要があります。\n⑥ クローズドクエスチョンに答えられない\nクローズドク\nエス\nチョンとはYES、NOで答えられる質問です。これにYES、NOで答えられないケースでは、何かしら問題が発生している可能性があります。このタスクは予定通り終わりそうですか？という質問に対して、ユーザーに明日説明予定でして、のような回答だったりすると、何か問題がありそうな気配を感じますね。\n他にも疑いポイントはたくさんあると思います。経験しつつ、多くの観点を蓄えておくことがプロジェクト成功に繋がると思います。",
    "url": "https://note.com/saratoga623/n/nedce187308d4"
  },
  "2024-10-18-進捗報告から真実を掴むには": {
    "title": "進捗報告から真実を掴むには",
    "text": "2024-10-18T07:09:43+09:00\n\n自分が手を動かして設計・プログラム製造・テストをする立場であれば、その範囲内の状況はよく理解できていると思います。しかし、リーダーなどプロジェクト全体や、複数のプロジェクトを見る立場になると、深く状況を知ることが難しくなり、報告を聞くことでプロジェクトの状況を把握する格好になります。\n正しい報告を受けていたら、事実がわかります。でも、必ずしも正しい報告がされるとは限りません。ずーっと順調だと報告を受けていたのに、ある日突然大幅な遅延が判明。これよくありがちな話です。つまり、正しい報告がされていなかったのです。\nメンバーが正しい報告をしてくれるかどうか？は、アンコントローラブルであり、報告からだけでは真実はわからないと考えるのが良いと思います。でも自分は複数のプロジェクトを担当していて、すべてを自分の目で深く見ることができません。さて、どうすれば真実を掴むことが出来るのでしょうか？\n私は質問をして真実を探ります。順調だと報告を受けました。でも、プロジェクトメンバーは長時間の時間外勤務をしています。時間外でカバーし、ギリギリのところで順調を保っている可能性があります。何か問題を抱えている可能性が高いのです。\n時間外が多いと思うのですが、何か理由があるのですか？と聞いてみる。すると、実はレビュー指摘が多く大幅な手戻りが発生していました。それを時間外でカバーしています、という回答があったりするのです。\nそうなればこっちのもの。何故レビュー指摘が多く発生してしまうのか？その原因を見つけ出し、手を打つことが出来るようになります。\n時間外が多いをトリガーにしての質問を例にあげましたが、トリガーとなりうるいくつかのパターンを自分の中に持っておく事が重要です。次回はいくつかのパターンを紹介したいと思います。",
    "url": "https://note.com/saratoga623/n/n5acd5f5916b7"
  },
  "2024-10-17-進捗報告は定量的に": {
    "title": "進捗報告は定量的に",
    "text": "2024-10-17T19:54:32+09:00\n\nシステム開発\nに関わらず、週次の進捗会議など進捗を報告する、報告を受ける場があると思います。\nとあるプロジェクトのお話です。進捗会議で、2週間遅延しているタスクがある旨、報告を受けました。これ、適切でしょうか？\n2週間という\n定量\n値を使っていますし、一見問題無いように見えます。しかし、これだけでは遅延の\nインパク\nトを伝えきれない感覚的な数字なのです。ひとりで進めているタスクが2週間遅延したのか？100人で進めているタスクが2週間遅延したのかで大きく違いますよね。2週間遅延しているのは事実ですが、\nインパク\nトも伝わる\n定量\n値を示す必要があるのです。\nでは、どのように\n定量\n化すれば良いのでしょうか？多くの人にとって釈迦に説法なのですが、\nWBS\nベースでの報告を徹底しましょう。\nWBS\nは、Work Breakdown Structureの頭文字で、文字通り作業（Work）を分解（Breakdown）して構造化（Structure）するプロジェクトの管理手法です。作業を分解したタスクが終わった、終わっていないを示すのです。\n今週までに100タスク終わらせる予定だったのですが、80タスクしか終わっておらず、20タスク遅延しています、という塩梅です。また、タスク毎の予定\n工数\nも管理できていれば、遅延による\nインパク\nトも把握しやすくなります。\nまた、1タスクは5営業日以下の大きさで定義することをお勧めします。多くのケースでは、週次で進捗報告をしているのではないでしょうか。5営業日以下にすることで、進捗会議で即遅延を察知できるようになります。逆に1ヶ月など長期にわたるタスクを定義してしまうと、実は遅れがあったとしても\nWBS\n上は遅延が見えず、タスク完了予定の1ヶ月後になり初めて遅延に気づくことになってしまいます。本来は被害が拡大する前に手を打っておくべきなのですが、手遅れになってしまうことだってあり得ます。\n5営業日以下でとなると、このようなタスク分解をしてしまいがちです。例えば基本設計をタスク分解したケース。基本設計を執筆するので、執筆というタスクが生まれます。でも、執筆に3週間かかります。5営業日に区切るために、執筆①、執筆②、執筆③という具合で、期間ってタスクを切る事をしがちなんです。①から③のタスクのゴールは不明瞭で、結局3週間のタスクを作っているのと同じなのです。",
    "url": "https://note.com/saratoga623/n/n39f322f29fa3"
  },
  "2024-10-15-PMはコミュニケーションが大事です": {
    "title": "PMはコミュニケーションが大事です",
    "text": "2024-10-15T06:43:24+09:00\n\n今日のタイトルを見て、あたりまえだろ！って思った人はたくさんいらっしゃるかと思います。でも、そんなあたりまえの話をします。\nその前に、プロジェクトのPMは複数人いるという話から。\nシステム開発\nは事業会社・ユーザーからの依頼に基づき、システムの会社が行うことが多いのではないかと思います。この場合、ユーザー側にもシステム側にもPMが\nアサイ\nンされます。またシステム会社は、開発の一部を委託することが多く、委託先の会社にもPMが\nアサイ\nンされます。それぞれの立場でQCDに責任を持つ役割を担います。\nこれらPM同士のベクトルが合っていれば、プロジェクトは成功しやすいですし、真逆のベクトルだった場合は、この世の終わりです。PMはプロジェクトを成功に導く人で、誰も失敗させたいとは思っていないはず。でも、会社が違えば\n利益相反\nがあったり、そもそも成功の定義が異なる可能性だってあるのです。結果、PM同士のベクトルが合わないプロジェクトが誕生してしまうのです。\nでは、どうすれば良いのでしょうか？PM同士のコミュニケーションが重要です。コミュニケーションにも程度があります。会って会話することをコミュニケーションと言う人もいれば、自分の考えを確実に伝えることを目指す人もいます。PM同士のコミュニケーションでは、相互理解の精神で相手の置かれている状況、相手の考えを理解することが必要です。\n同じPMなのに真逆のベクトルになっているのは何かしら理由があるはずです。コミュニケーションでその理由を明らかにした上で、成功に向けての手段を補正するのです。\nいろいろ書きましたが、シンプルに言うと本音ベースで会話すること。ビジネスの世界ですから、本音を出しすぎて信用を失うリスクが頭をよぎりますが、勇気と前向きな発想・発言があれば乗り越えることが出来ると信じています。また、進捗報告の場など、公式な会議ではなかなか本音\nトーク\nはしづらいものです。PM同士の非公式な会議を開催し、お互いの悩みを共有することをお勧めします。",
    "url": "https://note.com/saratoga623/n/n7a6894632000"
  },
  "2024-10-12-PMはバランスを取る仕事": {
    "title": "PMはバランスを取る仕事",
    "text": "2024-10-12T11:08:38+09:00\n\nPMとは、プロジェクトマネージャーのことです。さて、PMの役割って何でしょう？\nプロジェクト全体の進行を管理し、予算や品質、納期、成果物のクオリティに対して全責任を持つ役割。プロジェクト全体を見通した上で意思決定を行い、プロジェクトを成功に導くまでがPMのお仕事なのです。つまり、QCDに責任を持つ立場という事ですね。\n・Quality 品質\n・Cost コスト、価格\n・Delivery 納期\nの頭文字を取ってQCD。どれも大事ですね。プロジェクトマネジメントの本にもQCDは大事って書いてあります。\n価格を抑え、納期も短縮し、品質も高める。これが理想で、こうなるような工夫・努力は必要です。しかし品質と価格・納期はバーターになりやすいのです。いわゆる、安かろう悪かろうってやつです。\n品質を高めるべくテストをします。例えば、とある開発でのお話。70点の品質を目指すには10人月しかかかりません。しかし、そこから100点に持って行くには、レアケース含むバリエーションを網羅させるなど、50人月もかかってしまいます。さて、合計60人月かけて100点を目指しますか？\nPMはプロジェクト特性に応じて何点を目指すか考える必要があります。100点を取らないケースでは、リスクをユーザーに説明する。100点を取るケースでは、100点の必要性とお金の必要性をユーザーに説明する。そして合意することが大切です。\nこのバランス感覚、ある日突然身につくものでは無く、\nシステム開発\nの経験を通じて鍛えていくものだ、というのが私の持論です。",
    "url": "https://note.com/saratoga623/n/n52b066cb058f"
  }
}